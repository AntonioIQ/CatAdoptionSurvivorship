library(rethinking)
install.packages(rethinking)
install.packages(rethinking)
install.packages(c("coda", "mvtnorm", "devtools", "loo", "dagitty"))
install.packages(c("coda", "mvtnorm", "devtools", "loo", "dagitty"))
devtools::install_github("stan-dev/cmdstanr")
devtools::install_github("rmcelreath/rethinking")
library(rethinking)
library(tidyverse)
library(DiagrammeR)
library(broom)
library(distributional)
library(dagitty)
library(ggdist)
library(cmdstanr)
data(AustinCats)
glimpse(AustinCats)
# AustinCats %>% head(5)
AustinCats <- AustinCats %>%
mutate(pelaje = ifelse(color == "Black", "negro", "otro"),
id_pelaje  = ifelse(color == "negro", 1, 2))
color_gatos <- AustinCats %>%
mutate(pelaje = ifelse(color == "Black", "negro", "otro")) %>%
count(pelaje) %>%
mutate(porcentaje = 100*n/sum(n))
color_gatos %>%
ggplot(aes(y=pelaje)) +
geom_col(aes(x=porcentaje, fill=pelaje)) +
scale_fill_manual(values = c("negro" = "black", "otro" = "brown")) +
guides(fill = FALSE)
AustinCats %>% count(out_event)
AustinCats <- AustinCats %>%
mutate(adoptado  = ifelse(out_event == "Adoption", 1, 0),
censurado = ifelse(out_event != "Adoption", 1, 0))
gatos_adoptados <- AustinCats %>%
mutate(salida  = ifelse(out_event == "Adoption", "adopción", "otro")) %>%
count(salida) %>%
mutate(porcentaje = 100*n/sum(n))
gatos_adoptados %>%
ggplot(aes(y = salida)) +
geom_col(aes(x = porcentaje, fill = factor(salida))) +
scale_fill_manual(values = c("adopción" = "green", "otro" = "red")) +
guides(fill = FALSE)
AustinCats %>%
mutate(censurado = factor(censurado)) %>%
filter(days_to_event < 200) %>%
ggplot(aes(x = days_to_event, y = censurado)) +
# let's just mark off the 50% intervals
stat_halfeye(.width = .5, fill="red", height = 4) +
scale_y_discrete(NULL, labels = c("censurado == 0", "censurado == 1")) +
coord_cartesian(ylim = c(1.5, 5.1)) +
theme(axis.ticks.y = element_blank())
grViz("
digraph {
graph [ranksep = 0.2, rankdir = LR]
node [shape=plaintext]
U
C
edge [minlen = 3]
C -> D
U -> D
D -> A
}
", width = 400)
# g1 <- dagitty( "dag {     H -> GRE     H -> C     D -> C     C -> CR }")
#
# impliedConditionalIndependencies(g1, type = "all.pairs")
# Grid of X-axis values
x <- seq(0, 5, 0.1)
# lambda = 1
plot(x, dexp(x, rate = 1), type = "l",
ylab = "dexp(x)", lwd = 2, col = "red", main = "Probabilidad de que el evento ocurra en el tiempo x")
# lambda = 0.5
lines(x, dexp(x, rate = 0.5), col = "blue", lwd = 2)
# Adding a legend
legend("topright", c(expression(paste(, lambda)), "1", "0.5"),
lty = c(0, 1, 1), col = c("blue", "red"), box.lty = 0, lwd = 2)
# Grid of X-axis values
x <- seq(0, 5, 0.1)
# lambda = 1
plot(x, pexp(x, rate = 1), type = "l",
ylab = "P(X <= x)", lwd = 2, col = "red", main = "Exponential Distribution Cumulative Probability Functions")
# lambda = 0.5
lines(x, pexp(x, rate = 0.5), col = "blue", lwd = 2)
# Adding a legend
legend("bottomright", c(expression(paste(, lambda)), "1", "0.5"),
lty = c(0, 1, 1), col = c("blue", "red"), box.lty = 0, lwd = 2)
# Grid of X-axis values
x <- seq(0, 5, 0.1)
# lambda = 1
plot(x, 1 - pexp(x, rate = 1), type = "l",
ylab = "P(X > x)", lwd = 2, col = "red", main = "Exponential Distribution Complementary Cumulative Probability Functions")
# lambda = 0.5
lines(x, 1 - pexp(x, rate = 0.5), col = "blue", lwd = 2)
# Adding a legend
legend("topright", c(expression(paste(, lambda)), "1", "0.5"),
lty = c(0, 1, 1), col = c("blue", "red"), box.lty = 0, lwd = 2)
glimpse(AustinCats)
# simular días para ser salir (NO censurado)
gatos_negros<-round(rexp(1000,0.02))
gatos_otros<-round(rexp(1000,0.03))
days_to_event_NC=c(gatos_negros,gatos_otros)
# simular color de gatos, 1 es negro
color_id=c(rep(1,1000),rep(2,1000))
#datos censurados
# simular datos NO censurados
adoptado = if_else(days_to_event >= 200, 0, 1)
black<-round(rexp(1000,0.02))
other<-round(rexp(1000,0.03))
d<-data.frame(days_to_event=c(black,other),color_id=c(rep(1,1000),rep(2,1000)))
d<- d %>% mutate(adopted = if_else(days_to_event >= 200, 0, 1))
data_list_2 = list(
N = nrow(d),
adopted = d$adopted,
days_to_event = as.numeric(d$days_to_event),
color_id = d$color_id
)
fit_mod2 <- modelo$sample(
data = data_list_2,
init = 0.1,
step_size = 0.01,
seed = 1234,
chains = 2,
iter_sampling = 2000,
iter_warmup = 1000,
refresh = 200
# show_messages = FALSE,
# show_exceptions = FALSE
)
fit_mod2 <- modelo$sample(
data = data_list_2,
init = 0.1,
step_size = 0.01,
seed = 1234,
chains = 2,
iter_sampling = 2000,
iter_warmup = 1000,
refresh = 200
# show_messages = FALSE,
# show_exceptions = FALSE
)
data_adopted <- d[d$out_event == "Adoption", ]
data_adopted <- d[d$out_event == "Adoption", ]
data_adopted
data_adopted <- d[d$out_event == "Adoption", ]
data_adopted.head()
data_adopted <- d[d$out_event == "Adoption", ]
print(data_adopted)
data_adopted <- AustinCats %>%
filter(outcome == "Adoption")
data_adopted <- AustinCats %>%
filter(out_event == "Adoption")
print(data_adopted)
data_adopted <- AustinCats %>%
filter(out_event == "Adoption")
print(data_adopted.head()
data_adopted <- AustinCats %>%
filter(out_event == "Adoption")
print(data_adopted)
# Calcular tiempo de adopción en días (si es necesario)
data_adopted$time_to_event <- as.numeric(difftime(data_adopted$date_out, data_adopted$date_in, units = "days"))
data(AustinCats)
AustinCats <- AustinCats %>%
select(color, date_in, date_out, out_event, days_to_event) %>%
mutate(
pelaje = ifelse(color == "Black", "negro", "otro"),
id_pelaje = ifelse(color == "Black", 1, 2),
adoptado = ifelse(out_event == "Adoption", 1, 0),
censurado = ifelse(out_event != "Adoption", 1, 0)
)
print(AustinCats)
library(tidyverse)
library(cmdstanr)
data {
data {
data {
data {
data {
data {
model_string <- "
data {
int<lower=0> N;  // Número total de observaciones
int<lower=0> J;  // Número de categorías de color de pelaje
int<lower=1,upper=J> color_id[N];  // Índice de color de pelaje para cada observación
int<lower=0,upper=1> adopted[N];  // Indicador de adopción para cada observación
vector<lower=0>[N] days_to_event;  // Días hasta el evento (adopción o censura) para cada observación
}
parameters {
vector[J] alpha;  // Intercepto para cada categoría de color de pelaje
}
model {
vector[N] lambda;  // Tasa de adopción para cada observación
alpha ~ normal(0, 1);  // Prior para los interceptos: distribución normal con media 0 y desviación estándar 1
for (i in 1:N) {
lambda[i] = exp(-alpha[color_id[i]]);  // Tasa de adopción para cada observación, basada en el intercepto correspondiente al color de pelaje
}
days_to_event ~ exponential(lambda);  // Distribución exponencial para los días hasta el evento, con tasa lambda
}
"
data_list = list(
N = nrow(AustinCats),
J = length(unique(AustinCats$id_pelaje)),
color_id = AustinCats$id_pelaje,
adopted = AustinCats$adoptado,
days_to_event = AustinCats$days_to_event
)
fit_mod <- modelo$sample(
data = data_list,
seed = 1234,
chains = 2,
iter_sampling = 2000,
iter_warmup = 1000,
refresh = 200
)
fit_mod <- model_string$sample(
data = data_list,
seed = 1234,
chains = 2,
iter_sampling = 2000,
iter_warmup = 1000,
refresh = 200
)
fit_mod <- modelo$sample(
data = data_list,
seed = 1234,
chains = 2,
iter_sampling = 2000,
iter_warmup = 1000,
refresh = 200
)
stan_model <- stan_model(model_code = model_string, model_name = "modelo_gatos")
model_string <- "
data {
int<lower=0> N;  // Número total de observaciones
int<lower=0> J;  // Número de categorías de color de pelaje
int<lower=1,upper=J> color_id[N];  // Índice de color de pelaje para cada observación
int<lower=0,upper=1> adopted[N];  // Indicador de adopción para cada observación
vector<lower=0>[N] days_to_event;  // Días hasta el evento (adopción o censura) para cada observación
}
parameters {
vector[J] alpha;  // Intercepto para cada categoría de color de pelaje
}
model {
vector[N] lambda;  // Tasa de adopción para cada observación
alpha ~ normal(0, 1);  // Prior para los interceptos: distribución normal con media 0 y desviación estándar 1
for (i in 1:N) {
lambda[i] = exp(-alpha[color_id[i]]);  // Tasa de adopción para cada observación, basada en el intercepto correspondiente al color de pelaje
}
days_to_event ~ exponential(lambda);  // Distribución exponencial para los días hasta el evento, con tasa lambda
}
"
stan_model <- stan_model(model_code = model_string, model_name = "modelo_gatos")
stan_model <- stan_model(model_code = model_string, model_name = "modelo_gatos")
library(tidyverse)
library(cmdstanr)
library(rstan)
model_string <- "
data {
int<lower=0> N;  // Número total de observaciones
int<lower=0> J;  // Número de categorías de color de pelaje
int<lower=1,upper=J> color_id[N];  // Índice de color de pelaje para cada observación
int<lower=0,upper=1> adopted[N];  // Indicador de adopción para cada observación
vector<lower=0>[N] days_to_event;  // Días hasta el evento (adopción o censura) para cada observación
}
parameters {
vector[J] alpha;  // Intercepto para cada categoría de color de pelaje
}
model {
vector[N] lambda;  // Tasa de adopción para cada observación
alpha ~ normal(0, 1);  // Prior para los interceptos: distribución normal con media 0 y desviación estándar 1
for (i in 1:N) {
lambda[i] = exp(-alpha[color_id[i]]);  // Tasa de adopción para cada observación, basada en el intercepto correspondiente al color de pelaje
}
days_to_event ~ exponential(lambda);  // Distribución exponencial para los días hasta el evento, con tasa lambda
}
"
stan_model <- stan_model(model_code = model_string, model_name = "modelo_gatos")
data_list = list(
N = nrow(AustinCats),
J = length(unique(AustinCats$id_pelaje)),
color_id = AustinCats$id_pelaje,
adopted = AustinCats$adoptado,
days_to_event = AustinCats$days_to_event
)
stan_fit <- sampling(stan_model, data = data_list, chains = 3, iter = 2000, warmup = 1000, thin = 2, control = list(adapt_delta = 0.95))
print(stan_fit)
alpha_samples <- extract(stan_fit, pars = "alpha")$alpha
traceplot(stan_fit, pars = "alpha")
library(posterior)
alpha_intervals <- posterior::credible_interval(as.array(alpha_samples), prob = 0.95)
library(posterior)
library(ggplot2)
alpha_df <- as.data.frame(alpha_samples)
colnames(alpha_df) <- paste0("alpha[", 1:ncol(alpha_df), "]")
alpha_long <- tidyr::gather(alpha_df, key = "parameter", value = "value")
ggplot(alpha_long, aes(x = value, fill = parameter)) +
geom_density(alpha = 0.6) +
xlab("Alpha") +
ylab("Density") +
ggtitle("Posterior Distributions of Alpha")
lambda_black <- exp(-3.33)  # Tasa de adopción para gatos negros
lambda_other <- exp(-3.21)  # Tasa de adopción para gatos de otros colores
lambda_black <- exp(-3.33)  # Tasa de adopción para gatos negros
lambda_other <- exp(-3.21)  # Tasa de adopción para gatos de otros colores
calc_cdf_ccdf <- function(lambda, t) {
cdf <- 1 - exp(-lambda * t)
ccdf <- exp(-lambda * t)
return(data.frame(t = t, cdf = cdf, ccdf = ccdf))
}
lambda_black <- exp(-3.33)  # Tasa de adopción para gatos negros
lambda_other <- exp(-3.21)  # Tasa de adopción para gatos de otros colores
calc_cdf_ccdf <- function(lambda, t) {
cdf <- 1 - exp(-lambda * t)
ccdf <- exp(-lambda * t)
return(data.frame(t = t, cdf = cdf, ccdf = ccdf))
}
t <- seq(0, 100, length.out = 1000)  # Rango de tiempo (0 a 100 días)
cdf_ccdf_black <- calc_cdf_ccdf(lambda_black, t)
cdf_ccdf_other <- calc_cdf_ccdf(lambda_other, t)
lambda_black <- exp(-3.33)  # Tasa de adopción para gatos negros
lambda_other <- exp(-3.21)  # Tasa de adopción para gatos de otros colores
calc_cdf_ccdf <- function(lambda, t) {
cdf <- 1 - exp(-lambda * t)
ccdf <- exp(-lambda * t)
return(data.frame(t = t, cdf = cdf, ccdf = ccdf))
}
t <- seq(0, 100, length.out = 1000)  # Rango de tiempo (0 a 100 días)
cdf_ccdf_black <- calc_cdf_ccdf(lambda_black, t)
cdf_ccdf_other <- calc_cdf_ccdf(lambda_other, t)
library(ggplot2)
# Gráfico CDF
cdf_plot <- ggplot() +
geom_line(data = cdf_ccdf_black, aes(x = t, y = cdf, color = "Black"), size = 1) +
geom_line(data = cdf_ccdf_other, aes(x = t, y = cdf, color = "Other"), size = 1) +
labs(x = "Time (days)", y = "Cumulative Probability", title = "CDF of Adoption Time") +
scale_color_manual(name = "Coat Color", values = c("Black" = "black", "Other" = "blue"))
# Gráfico CCDF
ccdf_plot <- ggplot() +
geom_line(data = cdf_ccdf_black, aes(x = t, y = ccdf, color = "Black"), size = 1) +
geom_line(data = cdf_ccdf_other, aes(x = t, y = ccdf, color = "Other"), size = 1) +
labs(x = "Time (days)", y = "Complementary Cumulative Probability", title = "CCDF of Adoption Time") +
scale_color_manual(name = "Coat Color", values = c("Black" = "black", "Other" = "blue"))
# Mostrar los gráficos
print(cdf_plot)
print(ccdf_plot)
grViz("
digraph {
graph [ranksep = 0.2, rankdir = LR]
node [shape = plaintext]
C -> T
{rank = same; C; T}
}
", width = 400)
