---
title: Análisis de Supervivencia con adopciones de gatos
date: 2024-05-29
authors:
  - Sara Luz valenzuela Camacho
  - Gabriela Patricia Venegas Sánchez
  - José Antonio Tapia Godínez
format: html
execute:
  cache: true
---

# Proyecto Final



## Planteamiento

En el presente trabajo analizamos un problema tomado de las notas del curso de Statistical Rethinking del 2019 de McElreath. El objetivo es determinar si a los gatos de color negro les toma más tiempo ser adoptados. Trabajeremos con la base de datos `AustinCats` de la librería de `rethinking`.

```{r warning=FALSE, message=FALSE}
library(rethinking)
library(tidyverse)
library(DiagrammeR)
library(broom)
library(distributional)
library(dagitty)
library(ggdist)
library(cmdstanr)
library(rstan)
data(AustinCats)
glimpse(AustinCats)
# AustinCats %>% head(5)
```

Las variables que nos interesan son color(`color`), raza(`breed`), edad a la que entró (`intake_age`) motivo de la salida(`out_event`) y días para el evento de salida (`days_to_event`). 

Para el color dado que hay 204 tipos en la base, los clasificaremos solo en "negro" y "otro":

```{r}
AustinCats <- AustinCats %>% 
  mutate(pelaje = ifelse(color == "Black", "negro", "otro"),
         id_pelaje  = ifelse(color == "negro", 1, 2)) 

color_gatos <- AustinCats %>% 
  count(pelaje) %>% 
  mutate(porcentaje = round(100*n/sum(n)))

color_gatos %>%
  ggplot(aes(y = pelaje)) +
  geom_col(aes(x = porcentaje, fill = pelaje)) +
  geom_text(aes(x = porcentaje, label = paste0(porcentaje, "%")), 
            position = position_stack(vjust = 0.5), 
            color = "white") +
  scale_fill_manual(values = c("negro" = "black", "otro" = "brown")) +
  guides(fill = FALSE) +
  labs(x = "Porcentaje", y = "Pelaje")
```

De igual forma para raza los clasificaremos en "doméstico" si son de la raza `Domestic Shorthair Mix`, y 'otro' para las demás razas:

```{r}
AustinCats <- AustinCats %>% 
  mutate(raza = ifelse(breed == "Domestic Shorthair Mix", "domestico", "otro"),
         id_pelaje  = ifelse(raza == "domestico", 1, 2)) 

raza_gatos <- AustinCats %>% 
  count(raza) %>% 
  mutate(porcentaje = round(100*n/sum(n)))

raza_gatos %>%
  ggplot(aes(y = raza)) +
  geom_col(aes(x = porcentaje, fill = raza)) +
  geom_text(aes(x = porcentaje, label = paste0(porcentaje, "%")), 
            position = position_stack(vjust = 0.5), 
            color = "white") +
  scale_fill_manual(values = c("domestico" = "cyan", "otro" = "blue")) +
  guides(fill = FALSE) +
  labs(x = "Porcentaje", y = "Raza")
```



El evento de salida, se refiere a la razón por la que los gatos salieron del refugio, en este caso la gran mayoría es adoptado:

```{r}
AustinCats %>% count(out_event)
```

Siguiento el tratamiento propuesto por McElreath, crearemos dos variables a partir de la variable de evento de salida: "adoptado", que será binaria dependiendo de si fue adoptado o no, y la de "censurado", igualmente binaria y opuesta a la de "adoptado".


```{r}
AustinCats <- AustinCats %>% 
  mutate(adoptado  = ifelse(out_event == "Adoption", 1, 0),
         censurado = ifelse(out_event != "Adoption", 1, 0))

gatos_adoptados <- AustinCats %>% 
  mutate(salida  = ifelse(out_event == "Adoption", "adopción", "otro")) %>% 
  count(salida) %>% 
  mutate(porcentaje = 100*n/sum(n))

gatos_adoptados %>% 
  ggplot(aes(y = salida)) +
  geom_col(aes(x = porcentaje, fill = factor(salida))) +
  scale_fill_manual(values = c("adopción" = "green", "otro" = "red")) +
  guides(fill = FALSE)
```


Tenemos datos censulados únicamente por la derecha, no hay censurados por la izquierda ya que todos los gatos cuentan con una fecha de entrada al refugio. Los censurados por las derecha son aquellos que por alguno u otra razón salieron del refugio sin ser adoptados, o que siguen en el refugio esperando ser adoptados.


## Modelo sin datos censurados

No podemos ignorar los datos censurados, ya que lo que queremos modelar es el tiempo de espera antes de que un evento ocurra (muerte, adopción, etc.), y si quitamos estos datos tendríamos un error de sesgo. Como se ve en la siguiente gráfica.

```{r}
AustinCats %>% 
  mutate(censurado = factor(censurado)) %>% 
  filter(days_to_event < 200) %>% 
  
  ggplot(aes(x = days_to_event, y = censurado)) +
  # let's just mark off the 50% intervals
  stat_halfeye(.width = .5, fill="red", height = 4) +
  scale_y_discrete(NULL, labels = c("censurado == 0", "censurado == 1")) +
  coord_cartesian(ylim = c(1.5, 5.1)) +
  theme(axis.ticks.y = element_blank())
```

Sin embargo, como ejemplo académico haremos un primer modelo sin datos censurados.

### Modelo generativo

Sea $C$ el color del pelaje del gato (1 si es negro y 2 en cualquier otro caso), $U$ las variables no observadas o no tomadas en cuenta para el modelo (si el gato llegó enfermo, sexo, temperamento, etc.), $A$ es 1 si el gato fue adoptado y 0 en cualquier otro caso, y $D$ los días que le toma a un gato ser adoptado o salir del refugio.

Como para este primer modelo NO estamos tomando en cuenta los datos censurados, estamos controlando por $A$, es decir sólo tomamos los datos de los gatos que son adoptados.


```{r}
grViz("
digraph {
  graph [ranksep = 0.2, rankdir = LR]
  node [shape=plaintext]
  U [shape=circle]
  C
  D
  A [fontcolor=red]
  edge [minlen = 3]
  U -> A
  C -> A
  A -> D
}
", width = 400)
```

```{r}
g1 <- dagitty( "dag {     U -> A     C -> A     A -> D }")

impliedConditionalIndependencies(g1, type = "all.pairs")
```

Es fácil observar que es una mala idea controlar por $A$, que estamos bloqueando justo el efecto que queremos modelar que es si el color negro del gato afecta su tiempo para ser adoptado.

Podemos modelar las adopciones sí observadas (no censuradas) como una probabilidad de que un evento ocurra, esto es:

$$D_i\sim\exp(\lambda_i)$$
$$p(D_i|\lambda_i)=\lambda_i\exp(-\lambda_iD_i)$$
La siguiente función simula una muestra de N gatos y regresa el tiempo para ser adoptados:

```{r}
sim_gatos_1 <- function(lambda_negro = 0.02, lambda_otro = 0.04, N = 1000, p=0.15) {
  num_gatos_negros <- round(N*p)
  num_otros_gatos <- N - num_gatos_negros
  black_days <- round(rexp(num_gatos_negros, lambda_negro))
  other_days <- round(rexp(num_otros_gatos, lambda_otro))
  tibble( days_to_adoption = c(black_days, other_days),
          color_id=c(rep(1,num_gatos_negros),rep(2,num_otros_gatos))
        )
}
```

```{r}
# sim_gatos_1 <- function(N = 1000, p=0.15) {
# 
# alpha <- rnorm(2, 7, 3)
# print(alpha)
# lambda_negro <- 1/exp(alpha[1])
# lambda_otro <- 1/exp(alpha[2])
# print(lambda_negro)
# num_gatos_negros <- round(N*p)
# num_otros_gatos <- N - num_gatos_negros
# negro_dias <- round(rexp(num_gatos_negros, lambda_negro))
# otro_dias <- round(rexp(num_otros_gatos, lambda_otro))
# tibble(days_to_adoption = c(negro_dias, otro_dias),
#         color_id=c(rep(1,num_gatos_negros),rep(2,num_otros_gatos))
#       )
# 
# }
```



Podemos hacer pruebas al modelo generativo en casos extremos:

```{r}
# set.seed(1234)
sim_gatos_1(p=1.0, N=10) # puros gatos negros
```

```{r}
sim_gatos_1(p=0.0, N=10) # ningun gato negro
```

```{r}

data <- data.frame(
  time = c(5, 8, 12, 14, 15, 20, 22, 25, 26, 30),
  status = c(1, 1, 0, 1, 0, 1, 1, 0, 1, 1),
  group = c("A", "A", "A", "A", "B", "B", "B", "B", "B", "B")
)

# Function to calculate Kaplan-Meier survival estimates
calculate_km <- function(time, status) {
  n <- length(time)
  survival <- cumprod(1 - status / (n:1))
  data.frame(time = time, survival = survival)
}

# Calculate KM estimates for each group
km_data <- data %>%
  group_by(group) %>%
  arrange(time) %>%
  mutate(status_rev = rev(cumsum(rev(status)))) %>%
  group_modify(~ calculate_km(.x$time, .x$status_rev)) %>%
  ungroup()

# Plot the KM survival curve
ggplot(km_data, aes(x = time, y = survival, color = group)) +
  geom_step() +
  labs(title = "Kaplan-Meier Survival Curve", x = "Time", y = "Survival Probability") +
  theme_minimal()
```





### Cantidad a estimar

Queremos estimar el numero de días $D$ que le toma a un gato esperar para ser adoptado, pero, como lo mencionamos arriba, tomaremos sólo los gatos que sí fueron adoptados en la ventana de tiempo, esto es,

```{r}
AustinCats_model_1 <- AustinCats %>% filter(adoptado == 1)

nrow(AustinCats_model_1)/nrow(AustinCats)*100
```

trabajaremos con sólo el 50% de nuestras observaciones.

### Proceso estadístico

Como estamos controlando por $A_i=1$, nuestro objetivo es calcular o aproximar la cantidad:


$$p(D_i | A_i = 1)$$


$$D_i | A_i = 1 \sim \exp(\lambda_i)$$
con:
$$\lambda_i = 1/\mu_i$$
$$log \mu_i = \alpha_{Color_i}$$
$$\alpha_{Color} \sim N(0,1)$$


### Pruebas del proceso estadístico

```{r}
modelo <- cmdstan_model("modelo.stan")
print(modelo)
```

```{r}

```

```{r}
# data_list_2 = list(
#   N = nrow(d),
#   adopted = d$adopted,
#   days_to_event = as.numeric(d$days_to_event),
#   color_id = d$color_id
# )
```


```{r}
# fit_mod2 <- modelo$sample(
#   data = data_list_2,
#   init = 0.1,
#   step_size = 0.01,
#   seed = 1234,
#   chains = 2,
#   iter_sampling = 2000, 
#   iter_warmup = 1000,
#   refresh = 200
#   # show_messages = FALSE,
#   # show_exceptions = FALSE
#   )
```




### Analizar datos y resumir resultados

```{r}
data(AustinCats)
AustinCats <- AustinCats %>%
  select(color, date_in, date_out, out_event, days_to_event) %>%
  mutate(
    pelaje = ifelse(color == "Black", "negro", "otro"),
    id_pelaje = ifelse(color == "Black", 1, 2),
    adoptado = ifelse(out_event == "Adoption", 1, 0),
    censurado = ifelse(out_event != "Adoption", 1, 0)
  )
```

```{r}
# print(AustinCats)
```

```{r}
model_string <- "
data {
  int<lower=0> N;  // Número total de observaciones
  int<lower=0> J;  // Número de categorías de color de pelaje
  int<lower=1,upper=J> color_id[N];  // Índice de color de pelaje para cada observación
  int<lower=0,upper=1> adopted[N];  // Indicador de adopción para cada observación
  vector<lower=0>[N] days_to_event;  // Días hasta el evento (adopción o censura) para cada observación
}

parameters {
  vector[J] alpha;  // Intercepto para cada categoría de color de pelaje
}

model {
  vector[N] lambda;  // Tasa de adopción para cada observación
  
  alpha ~ normal(0, 1);  // Prior para los interceptos: distribución normal con media 0 y desviación estándar 1
  
  for (i in 1:N) {
    lambda[i] = exp(-alpha[color_id[i]]);  // Tasa de adopción para cada observación, basada en el intercepto correspondiente al color de pelaje
  }
  
  days_to_event ~ exponential(lambda);  // Distribución exponencial para los días hasta el evento, con tasa lambda
}
"
```

```{r}
stan_model <- stan_model(model_code = model_string, model_name = "modelo_gatos")
```


```{r}
data_list = list(
  N = nrow(AustinCats),
  J = length(unique(AustinCats$id_pelaje)),
  color_id = AustinCats$id_pelaje,
  adopted = AustinCats$adoptado,
  days_to_event = AustinCats$days_to_event
)
```


```{r}
stan_fit <- sampling(stan_model, data = data_list, chains = 3, iter = 2000, warmup = 1000, thin = 2, control = list(adapt_delta = 0.95))
```


### Checar cómputos y resutado del modelo

```{r}
print(stan_fit)
```
```{r}
alpha_samples <- extract(stan_fit, pars = "alpha")$alpha
```

```{r}
traceplot(stan_fit, pars = "alpha")
```


Inferencia
A partir de la distribución a posteriori de alpha, calculamos intervalos de credibilidad para evaluar la plausibilidad de los valores de los interceptos para cada categoría de color de pelaje, dada la evidencia de los datos. Los intervalos de credibilidad para cada elemento de alpha nos permitirán determinar si existe evidencia estadísticamente significativa de que el color del pelaje influye en el tiempo de adopción. Si los intervalos de credibilidad para las diferentes categorías de color no se superponen significativamente, esto sugeriría que hay una diferencia en los tiempos de adopción entre los gatos de diferentes colores.

```{r}
library(posterior)

library(ggplot2)

alpha_df <- as.data.frame(alpha_samples)
colnames(alpha_df) <- paste0("alpha[", 1:ncol(alpha_df), "]")

alpha_long <- tidyr::gather(alpha_df, key = "parameter", value = "value")

ggplot(alpha_long, aes(x = value, fill = parameter)) +
  geom_density(alpha = 0.6) +
  xlab("Alpha") +
  ylab("Density") +
  ggtitle("Posterior Distributions of Alpha")
```
Intervalos de credibilidad:


El intervalo de credibilidad del 95% para alpha[1] (gatos negros) es [3.30, 3.37].
El intervalo de credibilidad del 95% para alpha[2] (otros colores) es [3.20, 3.22].

Estos intervalos no se superponen, lo que sugiere que hay una diferencia significativa en los tiempos de adopción entre los gatos negros y los gatos de otros colores.

Medias posteriores:


La media posterior de alpha[1] (gatos negros) es 3.33.
La media posterior de alpha[2] (otros colores) es 3.21.

Observaciones

Es crucial reconocer que este modelo ignora los datos censurados (gatos no adoptados), lo que podría introducir sesgo en las estimaciones. Los gatos no adoptados podrían tener características distintas a los adoptados.

Por lo tanto, aunque el Modelo 2 ofrece información valiosa, sus resultados deben interpretarse con precaución y complementarse con los del Modelo 1, que incorpora los datos censurados para un análisis más completo.

```{r}
lambda_black <- exp(-3.33)  # Tasa de adopción para gatos negros
lambda_other <- exp(-3.21)  # Tasa de adopción para gatos de otros colores

calc_cdf_ccdf <- function(lambda, t) {
  cdf <- 1 - exp(-lambda * t)
  ccdf <- exp(-lambda * t)
  return(data.frame(t = t, cdf = cdf, ccdf = ccdf))
}

t <- seq(0, 100, length.out = 1000)  # Rango de tiempo (0 a 100 días)
cdf_ccdf_black <- calc_cdf_ccdf(lambda_black, t)
cdf_ccdf_other <- calc_cdf_ccdf(lambda_other, t)


library(ggplot2)

# Gráfico CDF
cdf_plot <- ggplot() +
  geom_line(data = cdf_ccdf_black, aes(x = t, y = cdf, color = "Black"), size = 1) +
  geom_line(data = cdf_ccdf_other, aes(x = t, y = cdf, color = "Other"), size = 1) +
  labs(x = "Time (days)", y = "Cumulative Probability", title = "CDF of Adoption Time") +
  scale_color_manual(name = "Coat Color", values = c("Black" = "black", "Other" = "blue"))

# Gráfico CCDF
ccdf_plot <- ggplot() +
  geom_line(data = cdf_ccdf_black, aes(x = t, y = ccdf, color = "Black"), size = 1) +
  geom_line(data = cdf_ccdf_other, aes(x = t, y = ccdf, color = "Other"), size = 1) +
  labs(x = "Time (days)", y = "Complementary Cumulative Probability", title = "CCDF of Adoption Time") +
  scale_color_manual(name = "Coat Color", values = c("Black" = "black", "Other" = "blue"))

# Mostrar los gráficos
print(cdf_plot)
print(ccdf_plot)
```
La curva CDF muestra la probabilidad acumulada de que un gato sea adoptado antes o en un tiempo determinado.
La curva CCDF muestra la probabilidad acumulada complementaria, es decir, la probabilidad de que un gato no sea adoptado antes o en un tiempo determinado






## Modelo con datos censurados

### Modelo generativo

Para este caso tenemos el mismo modelo, sólo que esta vez no vamos a controlar por la variable $A$.


```{r}
grViz("
digraph {
  graph [ranksep = 0.2, rankdir = LR]
  node [shape=plaintext]
  U [shape=circle]
  C
  D
  A
  edge [minlen = 3]
  U -> A
  C -> A
  A -> D
}
", width = 400)
```



```{r}
# g1 <- dagitty( "dag {     U -> A     C -> A     A -> D }")
# 
# impliedConditionalIndependencies(g1, type = "all.pairs")
```


Para las adopciones sí observadas (no censuradas) usamos el mismo modelo:

$$D_i\sim\exp(\lambda_i)$$
$$p(D_i|\lambda_i)=\lambda_i\exp(-\lambda_iD_i)$$
Y para los datos datos censurados usamos la distribución de probabilidad acumulada complementaria (CCDF): probabilidad de que el evento NO haya ocurrido entes o en el tiempo x.

La siguiente función simula una muestra de N gatos y regresa el tiempo para ser adoptados:

```{r}
sim_gatos_2 <- function(lambda_negro = 0.02, lambda_otro = 0.04, N = 1000, p=0.15) {
  num_gatos_negros <- round(N*p)
  num_otros_gatos <- N - num_gatos_negros
  black_days <- round(rexp(num_gatos_negros, lambda_negro))
  other_days <- round(rexp(num_otros_gatos, lambda_otro))
  days_to_event = c(black_days, other_days)
  # simular datos NO censurados
  adoptado = if_else(days_to_event >= 200, 0, 1)
  tibble( days_to_adoption = c(black_days, other_days),
          color_id=c(rep(1,num_gatos_negros),rep(2,num_otros_gatos)),
          adoptado
        )
}
```


Podemos hacer pruebas al modelo generativo en casos extremos:

```{r}
# set.seed(1234)
sim_gatos_2(p=1.0, N=10) # puros gatos negros
```

```{r}
sim_gatos_1(p=0.0, N=10) # ningun gato negro
```

```{r}

data <- data.frame(
  time = c(5, 8, 12, 14, 15, 20, 22, 25, 26, 30),
  status = c(1, 1, 0, 1, 0, 1, 1, 0, 1, 1),
  group = c("A", "A", "A", "A", "B", "B", "B", "B", "B", "B")
)

# Function to calculate Kaplan-Meier survival estimates
calculate_km <- function(time, status) {
  n <- length(time)
  survival <- cumprod(1 - status / (n:1))
  data.frame(time = time, survival = survival)
}

# Calculate KM estimates for each group
km_data <- data %>%
  group_by(group) %>%
  arrange(time) %>%
  mutate(status_rev = rev(cumsum(rev(status)))) %>%
  group_modify(~ calculate_km(.x$time, .x$status_rev)) %>%
  ungroup()

# Plot the KM survival curve
ggplot(km_data, aes(x = time, y = survival, color = group)) +
  geom_step() +
  labs(title = "Kaplan-Meier Survival Curve", x = "Time", y = "Survival Probability") +
  theme_minimal()
```




### Cantidad a estimar

Nuestro objetivo sigue siendo estimar el numero de días $D$ que le toma a un gato esperar para ser adoptado, esta vez utilizaremos tanto los datos censurados como no censurados.

### Proceso estadístico

$$f(y)=\lambda e^{\lambda y}$$

$$E[y]=\frac{1}{\lambda}$$


$$D_i | A_i = 1 \sim \exp(\lambda_i)$$
$$D_i | A_i = 0 \sim \exp-CCDF(\lambda_i)$$

$$\lambda_i = 1/\mu_i$$

$$log \mu_i = \alpha_{Color_i}$$
$$\alpha_{Color} \sim N(0,1)$$



### Pruebas del proceso estadístico 

```{r}
modelo <- cmdstan_model("modelo.stan")
print(modelo)
```




### Analizar los datos, y resumir resultados



```{r}
# data_list_1 = list(
#   N = nrow(AustinCats),
#   adopted = AustinCats$adoptado,
#   days_to_event = as.numeric(AustinCats$days_to_event),
#   color_id = AustinCats$id_pelaje
# )
```


```{r}
# fit_mod1 <- modelo$sample(
#   data = data_list_1,
#   seed = 123,
#   chains = 2,
#   iter_sampling = 2000, 
#   iter_warmup = 1000,
#   refresh = 200
#   # show_messages = FALSE,
#   # show_exceptions = FALSE
#   )
```



```{r}
# fit_mod1$summary()
```


```{r}
# resumen_1 <- fit_mod1$draws("mu_artist",format = "df") %>% 
#   as_tibble() %>% 
#   pivot_longer(cols = starts_with("mu_artist"), names_to = "variable") %>% 
#   select(variable, value) %>% 
#   group_by(variable) %>% 
#   summarise(media = mean(value),
#             q5 = quantile(value,0.05),
#             q95 = quantile(value,0.95)) %>% 
#   separate(variable, sep = "[\\[\\]]", into=c("variable", "artist_id"), extra="drop", convert = TRUE) 
# 
# resumen_1 <- left_join(artistas, resumen_1, by = "artist_id")
# 
# resumen_1 %>% 
#   ggplot(aes(x = reorder(artist, popularity), y = popularity), color = 'blue') +
#   geom_point(aes(y = media), color = "red") +
#   geom_linerange(aes(ymin = q5, ymax = q95), color = 'red') +
#   geom_point(aes(y = popularity, size = size), color = "black", alpha = 0.2) +
#   theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
```



### Checar cómputos y resultado del modelo


```{r}
black<-round(rexp(1000,0.02))
other<-round(rexp(1000,0.03))

d<-data.frame(days_to_event=c(black,other),color_id=c(rep(1,1000),rep(2,1000)))
d<- d %>% mutate(adopted = if_else(days_to_event >= 200, 0, 1))
```

```{r}
data_list_2 = list(
  N = nrow(d),
  adopted = d$adopted,
  days_to_event = as.numeric(d$days_to_event),
  color_id = d$color_id
)
```


```{r}
fit_mod2 <- modelo$sample(
  data = data_list_2,
  init = 0.1,
  step_size = 0.01,
  seed = 1234,
  chains = 2,
  iter_sampling = 2000, 
  iter_warmup = 1000,
  refresh = 200
  # show_messages = FALSE,
  # show_exceptions = FALSE
  )
```


**graficar dias vs proporcion de gatos**

```{r}
fit_mod2$summary(c("alpha"))
```

```{r}

```



```{r}
1/exp(3.88)
1/exp(3.47)
```


## Modelo con datos censurados y más variables

### Modelo generativo

Finalmente vamos a agregar la variable de raza a nuestro modelo:

```{r}
grViz("
digraph {
  graph [ranksep = 0.2, rankdir = LR]
  node [shape=plaintext]
  U [shape=circle]
  C
  D
  A
  edge [minlen = 3]
  U -> A
  R -> A
  C -> A
  A -> D
}
", width = 400)
```

```{r}
g1 <- dagitty( "dag {     U -> A     C -> A     A -> D  R->A }")

impliedConditionalIndependencies(g1, type = "all.pairs")
```

### Cantidad a estimar



###  Proceso estadístico

### Pruebas del proceso estadístico



### Analizar los datos y resumir resultados

```{r}

```


### Checar cómputos y resultado del modelo

# Conclusiones

* Para el modelo sin datos censurados

* El modelo con datos censurados y no censurados

* El tercer modelo que además de tomar en cuenta los datos censurados añade as variables de 
