colnames(alpha_df) <- paste0("alpha[", 1:ncol(alpha_df), "]")
alpha_long <- tidyr::gather(alpha_df, key = "parameter", value = "value")
ggplot(alpha_long, aes(x = value, fill = parameter)) +
geom_density(alpha = 0.6) +
xlab("Alpha") +
ylab("Density") +
ggtitle("Posterior Distributions of Alpha")
lambda_black <- exp(-3.33)  # Tasa de adopción para gatos negros
lambda_other <- exp(-3.21)  # Tasa de adopción para gatos de otros colores
calc_cdf_ccdf <- function(lambda, t) {
cdf <- 1 - exp(-lambda * t)
ccdf <- exp(-lambda * t)
return(data.frame(t = t, cdf = cdf, ccdf = ccdf))
}
t <- seq(0, 100, length.out = 1000)  # Rango de tiempo (0 a 100 días)
cdf_ccdf_black <- calc_cdf_ccdf(lambda_black, t)
cdf_ccdf_other <- calc_cdf_ccdf(lambda_other, t)
library(ggplot2)
# Gráfico CDF
cdf_plot <- ggplot() +
geom_line(data = cdf_ccdf_black, aes(x = t, y = cdf, color = "Black"), size = 1) +
geom_line(data = cdf_ccdf_other, aes(x = t, y = cdf, color = "Other"), size = 1) +
labs(x = "Time (days)", y = "Cumulative Probability", title = "CDF of Adoption Time") +
scale_color_manual(name = "Coat Color", values = c("Black" = "black", "Other" = "blue"))
# Gráfico CCDF
ccdf_plot <- ggplot() +
geom_line(data = cdf_ccdf_black, aes(x = t, y = ccdf, color = "Black"), size = 1) +
geom_line(data = cdf_ccdf_other, aes(x = t, y = ccdf, color = "Other"), size = 1) +
labs(x = "Time (days)", y = "Complementary Cumulative Probability", title = "CCDF of Adoption Time") +
scale_color_manual(name = "Coat Color", values = c("Black" = "black", "Other" = "blue"))
# Mostrar los gráficos
print(cdf_plot)
print(ccdf_plot)
write_csv(data(AustinCats))
> write_csv("data(AustinCats)")
library(dplyr)
library(lubridate)  # Para manejar fechas
# Cargando los datos
data(AustinCats)
# Preparando los datos
AustinCats_prepared <- AustinCats %>%
mutate(
# Convertir fechas de factor a fecha
date_in = mdy_hms(as.character(date_in)),
date_out = mdy_hms(as.character(date_out)),
# Extraer mes y año de la fecha de entrada
month_in = month(date_in, label = TRUE),
year_in = year(date_in),
# Codificar color del pelaje
pelaje = ifelse(color == "Black", "negro", "otro"),
id_pelaje = as.integer(color == "Black"),  # 1 para negro, 0 para otros
# Codificar si el gato fue adoptado
adoptado = as.integer(out_event == "Adoption"),
# Codificar si el dato está censurado
censurado = as.integer(out_event != "Adoption"),
# Codificar el evento de entrada
in_event_code = as.numeric(as.factor(in_event))  # Convertir evento de entrada a código numérico
) %>%
select(id_pelaje, days_to_event, month_in, year_in, adoptado, censurado, in_event_code)
# Mostrar las primeras filas del dataframe preparado
head(AustinCats_prepared)
model_string <- "
data {
int<lower=0> N;  // Número total de observaciones
int<lower=0> J;  // Número de categorías de color de pelaje
int<lower=1, upper=J> color_id[N];  // Índice de color de pelaje para cada observación
int<lower=0, upper=1> adopted[N];  // Indicador de adopción para cada observación
vector<lower=0>[N] days_to_event;  // Días hasta el evento (adopción o censura) para cada observación
int<lower=1, upper=K> in_event_id[N];  // Índice del evento de entrada
int<lower=1, upper=M> month_id[N];  // Índice del mes de entrada
int<lower=1, upper=L> year_id[N];  // Índice del año de entrada
int<lower=0> K;  // Número de categorías del evento de entrada
int<lower=0> M;  // Número de categorías de meses
int<lower=0> L;  // Número de categorías de años
}
parameters {
vector[J] alpha;  // Intercepto para cada categoría de color de pelaje
vector[K] beta_in;  // Coeficientes para cada categoría del evento de entrada
vector[M] beta_month;  // Coeficientes para cada categoría de mes
vector[L] beta_year;  // Coeficientes para cada categoría de año
real<lower=0> sigma;  // Desviación estándar para el modelo
}
model {
vector[N] lambda;  // Tasa de adopción para cada observación
// Prior distributions for the coefficients
alpha ~ normal(0, 1);
beta_in ~ normal(0, 1);
beta_month ~ normal(0, 1);
beta_year ~ normal(0, 1);
sigma ~ exponential(0.01);
// Calculating lambda for each observation
for (i in 1:N) {
lambda[i] = exp(alpha[color_id[i]] + beta_in[in_event_id[i]] + beta_month[month_id[i]] + beta_year[year_id[i]]);
}
// Likelihood
days_to_event ~ exponential(lambda);
}
"
stan_model <- stan_model(model_code = model_string, model_name = "modelo_gatos")
model_string <- "
data {
int<lower=0> N;  // Número total de observaciones
int<lower=0> J;  // Número de categorías de color de pelaje
int<lower=1,upper=J> color_id[N];  // Índice de color de pelaje para cada observación
int<lower=0,upper=1> adopted[N];  // Indicador de adopción para cada observación
vector<lower=0>[N] days_to_event;  // Días hasta el evento (adopción o censura) para cada observación
int<lower=1, upper=K> in_event_id[N];  // Índice del evento de entrada
int<lower=1, upper=M> month_id[N];  // Índice del mes de entrada
int<lower=1, upper=L> year_id[N];  // Índice del año de entrada
int<lower=0> K;  // Número de categorías del evento de entrada
int<lower=0> M;  // Número de categorías de meses
int<lower=0> L;  // Número de categorías de años
}
parameters {
vector[J] alpha;  // Intercepto para cada categoría de color de pelaje
vector[K] beta_in;  // Coeficientes para cada categoría del evento de entrada
vector[M] beta_month;  // Coeficientes para cada categoría de mes
vector[L] beta_year;  // Coeficientes para cada categoría de año
real<lower=0> sigma;  // Desviación estándar para el modelo
}
model {
vector[N] lambda;  // Tasa de adopción para cada observación
alpha ~ normal(0, 1);
beta_in ~ normal(0, 1);
beta_month ~ normal(0, 1);
beta_year ~ normal(0, 1);
sigma ~ exponential(0.01);
for (i in 1:N) {
lambda[i] = exp(alpha[color_id[i]] + beta_in[in_event_id[i]] + beta_month[month_id[i]] + beta_year[year_id[i]]);
}
days_to_event ~ exponential(lambda);
}
"
stan_model <- stan_model(model_code = model_string, model_name = "modelo_gatos")
model_string <- "
data {
int<lower=0> N;  // Número total de observaciones
int<lower=0> J;  // Número de categorías de color de pelaje
int<lower=1,upper=J> color_id[N];  // Índice de color de pelaje para cada observación
int<lower=0,upper=1> adopted[N];  // Indicador de adopción para cada observación
vector<lower=0>[N] days_to_event;  // Días hasta el evento (adopción o censura) para cada observación
int<lower=1, upper=K> in_event_id[N];  // Índice del evento de entrada
int<lower=1, upper=M> month_id[N];  // Índice del mes de entrada
int<lower=1, upper=L> year_id[N];  // Índice del año de entrada
int<lower=0> K;  // Número de categorías del evento de entrada
int<lower=0> M;  // Número de categorías de meses
int<lower=0> L;  // Número de categorías de años
}
parameters {
vector[J] alpha;  // Intercepto para cada categoría de color de pelaje
vector[K] beta_in;  // Coeficientes para cada categoría del evento de entrada
vector[M] beta_month;  // Coeficientes para cada categoría de mes
vector[L] beta_year;  // Coeficientes para cada categoría de año
real<lower=0> sigma;  // Desviación estándar para el modelo
}
model {
vector[N] lambda;  // Tasa de adopción para cada observación
alpha ~ normal(0, 1);
beta_in ~ normal(0, 1);
beta_month ~ normal(0, 1);
beta_year ~ normal(0, 1);
sigma ~ exponential(0.01);
for (i in 1:N) {
lambda[i] = exp(alpha[color_id[i]] + beta_in[in_event_id[i]] + beta_month[month_id[i]] + beta_year[year_id[i]]);
}
days_to_event ~ exponential(lambda);
}
"
stan_model <- stan_model(model_code = model_string, model_name = "modelo_gatos")
model_string <- "
data {
int<lower=0> N;  // Número total de observaciones
int<lower=0> J;  // Número de categorías de color de pelaje
int<lower=0> K;  // Número de categorías del evento de entrada
int<lower=0> M;  // Número de categorías de meses
int<lower=0> L;  // Número de categorías de años
int<lower=1, upper=J> color_id[N];  // Índice de color de pelaje para cada observación
int<lower=0, upper=1> adopted[N];  // Indicador de adopción para cada observación
vector<lower=0>[N] days_to_event;  // Días hasta el evento (adopción o censura) para cada observación
int<lower=1, upper=K> in_event_id[N];  // Índice del evento de entrada
int<lower=1, upper=M> month_id[N];  // Índice del mes de entrada
int<lower=1, upper=L> year_id[N];  // Índice del año de entrada
}
parameters {
vector[J] alpha;  // Intercepto para cada categoría de color de pelaje
vector[K] beta_in;  // Coeficientes para cada categoría del evento de entrada
vector[M] beta_month;  // Coeficientes para cada categoría de mes
vector[L] beta_year;  // Coeficientes para cada categoría de año
real<lower=0> sigma;  // Desviación estándar para el modelo
}
model {
vector[N] lambda;  // Tasa de adopción para cada observación
alpha ~ normal(0, 1);
beta_in ~ normal(0, 1);
beta_month ~ normal(0, 1);
beta_year ~ normal(0, 1);
sigma ~ exponential(0.01);
for (i in 1:N) {
lambda[i] = exp(alpha[color_id[i]] + beta_in[in_event_id[i]] + beta_month[month_id[i]] + beta_year[year_id[i]]);
}
days_to_event ~ exponential(lambda);
}
"
stan_model <- stan_model(model_code = model_string, model_name = "modelo_gatos")
model_string <- "
data {
int<lower=0> N;  // Número total de observaciones
int<lower=0> J;  // Número de categorías de color de pelaje
int<lower=0> K;  // Número de categorías del evento de entrada
int<lower=0> M;  // Número de categorías de meses
int<lower=0> L;  // Número de categorías de años
int<lower=1, upper=J> color_id[N];  // Índice de color de pelaje para cada observación
int<lower=0, upper=1> adopted[N];  // Indicador de adopción para cada observación
vector<lower=0>[N] days_to_event;  // Días hasta el evento (adopción o censura) para cada observación
int<lower=1, upper=K> in_event_id[N];  // Índice del evento de entrada
int<lower=1, upper=M> month_id[N];  // Índice del mes de entrada
int<lower=1, upper=L> year_id[N];  // Índice del año de entrada
}
parameters {
vector[J] alpha;  // Intercepto para cada categoría de color de pelaje
vector[K] beta_in;  // Coeficientes para cada categoría del evento de entrada
vector[M] beta_month;  // Coeficientes para cada categoría de mes
vector[L] beta_year;  // Coeficientes para cada categoría de año
real<lower=0> sigma;  // Desviación estándar para el modelo
}
model {
vector[N] lambda;  // Tasa de adopción para cada observación
alpha ~ normal(0, 1);
beta_in ~ normal(0, 1);
beta_month ~ normal(0, 1);
beta_year ~ normal(0, 1);
sigma ~ exponential(0.01);
for (i in 1:N) {
lambda[i] = exp(alpha[color_id[i]] + beta_in[in_event_id[i]] + beta_month[month_id[i]] + beta_year[year_id[i]]);
}
days_to_event ~ exponential(lambda);
}
"
# Crear el modelo Stan, nombrándolo como modelo_gatos_3
stan_model <- rstan::stan_model(model_code = model_string, model_name = "modelo_gatos_3")
# Ajustar el modelo
stan_fit <- rstan::sampling(stan_model, data = data_list, chains = 3, iter = 2000, warmup = 1000, thin = 2, control = list(adapt_delta = 0.95))
# Imprimir resultados
print(stan_fit)
# Suponiendo que AustinCats es tu DataFrame y ya tiene las columnas necesarias transformadas y listas
# Asegurarte de que las variables están correctamente calculadas
K <- length(unique(AustinCats$in_event_id))
M <- length(unique(AustinCats$month_id))
L <- length(unique(AustinCats$year_id))
# Crear la lista de datos que pasas a Stan
data_list <- list(
N = nrow(AustinCats),
J = length(unique(AustinCats$color_id)),
K = K,
M = M,
L = L,
color_id = AustinCats$color_id,
adopted = AustinCats$adoptado,
days_to_event = AustinCats$days_to_event,
in_event_id = AustinCats$in_event_id,
month_id = AustinCats$month_id,
year_id = AustinCats$year_id
)
# Ajustar el modelo
stan_fit <- rstan::sampling(stan_model, data = data_list, chains = 3, iter = 2000, warmup = 1000, thin = 2, control = list(adapt_delta = 0.95))
# Imprimir los resultados
print(stan_fit)
# Asegúrate de que la transformación de color a color_id se hace correctamente
AustinCats <- AustinCats %>%
mutate(color_id = ifelse(color == "Black", 1, 2))
# Verifica que todas las columnas necesarias estén en AustinCats y correctamente formateadas
summary(AustinCats$color_id)  # Esto te mostrará un resumen para verificar la existencia y el contenido de color_id
# Re-crear data_list asegurando que todas las variables necesarias están incluidas
data_list <- list(
N = nrow(AustinCats),
J = max(AustinCats$color_id, na.rm = TRUE),  # Asegúrate de que J se calcule correctamente
color_id = AustinCats$color_id,
adopted = AustinCats$adoptado,
days_to_event = AustinCats$days_to_event,
in_event_id = AustinCats$in_event_id,
month_id = AustinCats$month_id,
year_id = AustinCats$year_id,
K = max(AustinCats$in_event_id, na.rm = TRUE),
M = max(AustinCats$month_id, na.rm = TRUE),
L = max(AustinCats$year_id, na.rm = TRUE)
)
# Intenta ajustar el modelo nuevamente
stan_fit <- rstan::sampling(stan_model, data = data_list, chains = 3, iter = 2000, warmup = 1000, thin = 2, control = list(adapt_delta = 0.95))
# Imprimir los resultados
print(stan_fit)
# Asegúrate de que las columnas relevantes no contienen NA y revisa sus valores únicos
summary(AustinCats$in_event_id)
summary(AustinCats$month_id)
summary(AustinCats$year_id)
# Si alguna de estas columnas contiene NA, necesitas limpiar los datos o ajustar los NA antes de calcular K, M, L
AustinCats$in_event_id <- na.omit(AustinCats$in_event_id)
AustinCats$month_id <- na.omit(AustinCats$month_id)
AustinCats$year_id <- na.omit(AustinCats$year_id)
# Ahora, recalcula K, M, L
K <- max(AustinCats$in_event_id, na.rm = TRUE)
M <- max(AustinCats$month_id, na.rm = TRUE)
L <- max(AustinCats$year_id, na.rm = TRUE)
# Asegúrate de que K, M, y L no son -Inf
print(K)
print(M)
print(L)
library(dplyr)
library(lubridate)
library(rstan)
data(AustinCats)
AustinCats_prepared <- AustinCats %>%
mutate(
date_in = mdy_hms(as.character(date_in)),
date_out = mdy_hms(as.character(date_out)),
month_in = month(date_in, label = TRUE),
year_in = year(date_in),
pelaje = ifelse(color == "Black", "negro", "otro"),
id_pelaje = as.integer(color == "Black"),
adoptado = as.integer(out_event == "Adoption"),
censurado = as.integer(out_event != "Adoption"),
in_event_code = as.integer(as.factor(in_event)),
color_id = as.integer(as.factor(id_pelaje)),
in_event_id = as.integer(as.factor(in_event_code)),
month_id = as.integer(month_in),
year_id = as.integer(as.factor(year_in))
) %>%
select(color_id, days_to_event, month_id, year_id, adoptado, censurado, in_event_id)
model_string <- "
data {
int<lower=0> N;
int<lower=1> J;
int<lower=1> K;
int<lower=1> M;
int<lower=1> L;
int<lower=1, upper=J> color_id[N];
int<lower=0, upper=1> adopted[N];
vector<lower=0>[N] days_to_event;
int<lower=1, upper=K> in_event_id[N];
int<lower=1, upper=M> month_id[N];
int<lower=1, upper=L> year_id[N];
}
parameters {
vector[J] alpha;
vector[K] beta_in;
vector[M] beta_month;
vector[L] beta_year;
real<lower=0> sigma;
}
model {
vector[N] lambda;
alpha ~ normal(0, 1);
beta_in ~ normal(0, 1);
beta_month ~ normal(0, 1);
beta_year ~ normal(0, 1);
sigma ~ exponential(0.01);
for (i in 1:N) {
lambda[i] = exp(alpha[color_id[i]] + beta_in[in_event_id[i]] +
beta_month[month_id[i]] + beta_year[year_id[i]]);
}
days_to_event ~ exponential(1./lambda);
}
"
data_list <- list(
N = nrow(AustinCats_prepared),
J = length(unique(AustinCats_prepared$color_id)),
K = length(unique(AustinCats_prepared$in_event_id)),
M = length(unique(AustinCats_prepared$month_id)),
L = length(unique(AustinCats_prepared$year_id)),
color_id = AustinCats_prepared$color_id,
adopted = AustinCats_prepared$adoptado,
days_to_event = AustinCats_prepared$days_to_event,
in_event_id = AustinCats_prepared$in_event_id,
month_id = AustinCats_prepared$month_id,
year_id = AustinCats_prepared$year_id
)
stan_model <- stan_model(model_code = model_string, model_name = "modelo_gatos_3")
library(dplyr)
library(lubridate)
library(rstan)
data(AustinCats)
AustinCats_prepared <- AustinCats %>%
mutate(
date_in = mdy_hms(as.character(date_in)),
date_out = mdy_hms(as.character(date_out)),
month_in = month(date_in, label = TRUE),
year_in = year(date_in),
pelaje = ifelse(color == "Black", "negro", "otro"),
id_pelaje = as.integer(color == "Black"),
adoptado = as.integer(out_event == "Adoption"),
censurado = as.integer(out_event != "Adoption"),
in_event_code = as.integer(as.factor(in_event)),
color_id = as.integer(as.factor(id_pelaje)),
in_event_id = as.integer(as.factor(in_event_code)),
month_id = as.integer(month_in),
year_id = as.integer(as.factor(year_in))
) %>%
select(color_id, days_to_event, month_id, year_id, adoptado, censurado, in_event_id)
model_string <- "
data {
int<lower=0> N;
int<lower=1> J;
int<lower=1> K;
int<lower=1> M;
int<lower=1> L;
int<lower=1, upper=J> color_id[N];
int<lower=0, upper=1> adopted[N];
vector<lower=0>[N] days_to_event;
int<lower=1, upper=K> in_event_id[N];
int<lower=1, upper=M> month_id[N];
int<lower=1, upper=L> year_id[N];
}
parameters {
vector[J] alpha;
vector[K] beta_in;
vector[M] beta_month;
vector[L] beta_year;
real<lower=0> sigma;
}
model {
vector[N] inv_lambda;
alpha ~ normal(0, 1);
beta_in ~ normal(0, 1);
beta_month ~ normal(0, 1);
beta_year ~ normal(0, 1);
sigma ~ exponential(0.01);
for (i in 1:N) {
inv_lambda[i] = exp(-(alpha[color_id[i]] + beta_in[in_event_id[i]] +
beta_month[month_id[i]] + beta_year[year_id[i]]));
}
days_to_event ~ exponential(inv_lambda);
}
"
stan_model <- stan_model(model_code = model_string, model_name = "modelo_gatos_3")
stan_fit <- sampling(stan_model, data = data_list, chains = 3, iter = 2000, warmup = 1000, thin = 2,
control = list(adapt_delta = 0.95))
print(stan_fit)
# Verificar la convergencia
print(stan_fit, pars = c("alpha", "beta_in", "beta_month", "beta_year", "sigma"))
# Visualizar las distribuciones posteriores
plot(stan_fit, pars = c("alpha", "beta_in", "beta_month", "beta_year", "sigma"))
# Obtener intervalos de credibilidad del 95% para los parámetros
posterior_interval(stan_fit, pars = c("alpha", "beta_in", "beta_month", "beta_year", "sigma"), prob = 0.95)
# Extraer muestras posteriores
posterior_samples <- rstan::extract(stan_fit)
# Obtener intervalos de credibilidad del 95% para los parámetros
credible_intervals <- lapply(posterior_samples, function(x) {
if (is.matrix(x)) {
apply(x, 2, function(y) quantile(y, probs = c(0.025, 0.975)))
} else {
quantile(x, probs = c(0.025, 0.975))
}
})
print(credible_intervals)
# Verificar la convergencia
print(stan_fit, pars = c("alpha", "beta_in", "beta_month", "beta_year", "sigma"))
# Visualizar las distribuciones posteriores
plot(stan_fit, pars = c("alpha", "beta_in", "beta_month", "beta_year", "sigma"))
# Obtener intervalos de credibilidad del 95% para los parámetros
posterior_interval(stan_fit, pars = c("alpha", "beta_in", "beta_month", "beta_year", "sigma"), prob = 0.95)
# Extraer muestras posteriores
posterior_samples <- rstan::extract(stan_fit)
# Obtener intervalos de credibilidad del 95% para los parámetros
credible_intervals <- lapply(posterior_samples, function(x) {
if (is.matrix(x)) {
apply(x, 2, function(y) quantile(y, probs = c(0.025, 0.975)))
} else {
quantile(x, probs = c(0.025, 0.975))
}
})
print(credible_intervals)
# Verificar la convergencia
print(stan_fit, pars = c("alpha", "beta_in", "beta_month", "beta_year", "sigma"))
# Visualizar las distribuciones posteriores
plot(stan_fit, pars = c("alpha", "beta_in", "beta_month", "beta_year", "sigma"))
# Extraer muestras posteriores
posterior_samples <- rstan::extract(stan_fit)
# Obtener intervalos de credibilidad del 95% para los parámetros
credible_intervals <- lapply(posterior_samples, function(x) {
if (is.matrix(x)) {
apply(x, 2, function(y) quantile(y, probs = c(0.025, 0.975)))
} else {
quantile(x, probs = c(0.025, 0.975))
}
})
print(credible_intervals)
# Calcular la tasa de adopción esperada para gatos negros que ingresan en enero de 2015
negro_ene_2015 <- exp(-(posterior_samples$alpha[,1] +
posterior_samples$beta_in[,1] +
posterior_samples$beta_month[,1] +
posterior_samples$beta_year[,6]))
# Resumen de la distribución posterior de la tasa de adopción para este perfil
summary(negro_ene_2015)
# Calcular la tasa de adopción esperada para gatos no negros que ingresan en julio de 2013
otro_jul_2013 <- exp(-(posterior_samples$alpha[,2] +
posterior_samples$beta_in[,1] +
posterior_samples$beta_month[,7] +
posterior_samples$beta_year[,3]))
# Calcular la tasa de adopción esperada para gatos negros que ingresan en diciembre de 2017
negro_dic_2017 <- exp(-(posterior_samples$alpha[,1] +
posterior_samples$beta_in[,1] +
posterior_samples$beta_month[,12] +
posterior_samples$beta_year[,6]))
# Comparar las distribuciones posteriores
boxplot(negro_ene_2015, otro_jul_2013, negro_dic_2017,
names = c("Negro Ene 2015", "Otro Jul 2013", "Negro Dic 2017"),
main = "Comparación de Tasas de Adopción Esperadas",
ylab = "Tasa de Adopción Esperada")
# Gráficos de autocorrelación
rstan::traceplot(stan_fit, pars = c("alpha", "beta_in", "beta_month", "beta_year", "sigma"),
inc_warmup = FALSE, nrow = 5)
# Resumen de n_eff y Rhat para todos los parámetros
rstan::summary(stan_fit, pars = c("alpha", "beta_in", "beta_month", "beta_year", "sigma"))$summary[, c("n_eff", "Rhat")]
